#!/bin/bash
# ============================================================================
# BESS Site Survey System v2.0 - Production Deployment Script
# ============================================================================
# 本番環境への完全デプロイスクリプト
# 使用方法: ./scripts/deploy-production.sh

set -e  # エラーで停止

# 色付き出力
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}============================================================================${NC}"
echo -e "${BLUE}BESS Site Survey System v2.0 - Production Deployment${NC}"
echo -e "${BLUE}============================================================================${NC}"
echo ""

# ============================================================================
# 1. 環境確認
# ============================================================================
echo -e "${YELLOW}[1/8] 環境確認中...${NC}"

if [ ! -f ".env.production" ]; then
    echo -e "${RED}❌ .env.production ファイルが見つかりません${NC}"
    echo "   .env.production.template をコピーして設定してください"
    exit 1
fi

# Node.jsバージョン確認
NODE_VERSION=$(node -v)
echo -e "${GREEN}✓ Node.js: $NODE_VERSION${NC}"

# npm確認
NPM_VERSION=$(npm -v)
echo -e "${GREEN}✓ npm: $NPM_VERSION${NC}"

echo ""

# ============================================================================
# 2. 依存関係のインストール
# ============================================================================
echo -e "${YELLOW}[2/8] 依存関係のインストール中...${NC}"

# バックエンド
echo "  バックエンドの依存関係..."
npm ci --production=false

# フロントエンド
echo "  フロントエンドの依存関係..."
cd frontend
npm ci --production=false
cd ..

echo -e "${GREEN}✓ 依存関係のインストール完了${NC}"
echo ""

# ============================================================================
# 3. テスト実行
# ============================================================================
echo -e "${YELLOW}[3/8] テスト実行中...${NC}"

# バックエンドテスト
echo "  バックエンドテスト..."
npm test -- --passWithNoTests

# フロントエンドテスト
echo "  フロントエンドテスト..."
cd frontend
npm test -- --passWithNoTests --run
cd ..

echo -e "${GREEN}✓ 全テストパス${NC}"
echo ""

# ============================================================================
# 4. Lint & Format チェック
# ============================================================================
echo -e "${YELLOW}[4/8] コード品質チェック中...${NC}"

# バックエンド
echo "  バックエンドのLint..."
npm run lint || echo "  ⚠️  Lint警告あり（続行）"

# フロントエンド
echo "  フロントエンドのLint..."
cd frontend
npm run lint || echo "  ⚠️  Lint警告あり（続行）"
cd ..

echo -e "${GREEN}✓ コード品質チェック完了${NC}"
echo ""

# ============================================================================
# 5. ビルド
# ============================================================================
echo -e "${YELLOW}[5/8] ビルド中...${NC}"

# バックエンドビルド
echo "  バックエンドビルド..."
npm run build

# フロントエンドビルド
echo "  フロントエンドビルド..."
cd frontend
npm run build
cd ..

echo -e "${GREEN}✓ ビルド完了${NC}"
echo ""

# ============================================================================
# 6. データベースマイグレーション
# ============================================================================
echo -e "${YELLOW}[6/8] データベースマイグレーション...${NC}"

# Supabaseマイグレーション実行
echo "  マイグレーションファイルを確認..."
if [ -d "database/migrations" ]; then
    echo "  ✓ マイグレーションファイル確認完了"
    echo "  ⚠️  Supabase管理画面から手動でマイグレーションを実行してください"
    echo "     または supabase CLI を使用してください"
else
    echo "  ⚠️  マイグレーションディレクトリが見つかりません"
fi

echo ""

# ============================================================================
# 7. 本番環境へのデプロイ
# ============================================================================
echo -e "${YELLOW}[7/8] 本番環境へのデプロイ...${NC}"

# デプロイ先の選択
echo "デプロイ先を選択してください:"
echo "  1) VPS (さくらVPS等)"
echo "  2) Vercel (フロントエンド) + VPS (バックエンド)"
echo "  3) Docker Compose"
echo "  4) スキップ"
read -p "選択 (1-4): " DEPLOY_CHOICE

case $DEPLOY_CHOICE in
    1)
        echo "  VPSへのデプロイ..."
        if [ -f "scripts/deploy-vps-api.sh" ]; then
            bash scripts/deploy-vps-api.sh
        else
            echo "  ⚠️  VPSデプロイスクリプトが見つかりません"
        fi
        ;;
    2)
        echo "  Vercel + VPSへのデプロイ..."
        # フロントエンド: Vercel
        echo "  フロントエンドをVercelにデプロイ..."
        cd frontend
        npx vercel --prod || echo "  ⚠️  Vercelデプロイに失敗（手動で実行してください）"
        cd ..
        
        # バックエンド: VPS
        echo "  バックエンドをVPSにデプロイ..."
        if [ -f "scripts/deploy-vps-api.sh" ]; then
            bash scripts/deploy-vps-api.sh
        fi
        ;;
    3)
        echo "  Docker Composeでデプロイ..."
        docker-compose -f docker-compose.prod.yml up -d --build
        echo -e "${GREEN}✓ Dockerコンテナ起動完了${NC}"
        ;;
    4)
        echo "  デプロイをスキップしました"
        ;;
    *)
        echo "  無効な選択です"
        ;;
esac

echo ""

# ============================================================================
# 8. デプロイ後の確認
# ============================================================================
echo -e "${YELLOW}[8/8] デプロイ後の確認...${NC}"

echo "  以下を確認してください:"
echo "  □ データベース接続"
echo "  □ API エンドポイント"
echo "  □ フロントエンドアクセス"
echo "  □ 環境変数の設定"
echo "  □ SSL証明書"
echo "  □ ログ出力"

echo ""

# ============================================================================
# 完了
# ============================================================================
echo -e "${GREEN}============================================================================${NC}"
echo -e "${GREEN}✅ デプロイプロセス完了！${NC}"
echo -e "${GREEN}============================================================================${NC}"
echo ""

echo "次のステップ:"
echo "  1. ブラウザでアプリケーションにアクセス"
echo "  2. ログを確認: docker-compose logs -f (Docker使用時)"
echo "  3. ヘルスチェック: curl https://your-domain.com/api/health"
echo "  4. モニタリングダッシュボードを確認"
echo ""

echo -e "${BLUE}デプロイ完了時刻: $(date)${NC}"
